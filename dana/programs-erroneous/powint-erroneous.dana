def main

  def powint: base as int, exp as int, mod as int, result as ref int
    
    var temp is int

    if exp < 1:
      result := 1
    elif exp = 0: 
        result := 1
    else:
      powint: base, exp / 2, mod, temp 
      
      if exp % 2 = 0: 
        result := (temp * temp) % mod 
      else: 
        result := (base * temp * temp) % mod
        
        writeString: temp # SEMANTIC ERROR: Calling writeString (expects byte[]) with an int argument (temp)

  var b   is int
  var e   is int
  var m   is int
  var res is int

  writeString: "Enter base: "
  b := readInteger()
  writeString: "Enter exponent: "
  e := readInteger()
  writeString: "Enter modulus: "
  m := readInteger()

  powint: b, e, m, res

  writeString: "Result: "
  writeInteger: res
  writeString: "\n"
