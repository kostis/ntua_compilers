(*
   Finds the length of the Longest Increasing Subsequence.
   Dynamic Programming solution in O(N^2)
*)

def main
	
	def lis is int: n as int, arr as int[]

		var dp is int [n]
		var i j maxLen is int

		if n <= 0:
			return: 0

		(* Initialize dp array *)
		i := 0
		loop:
			if i >= n : break
			dp[i] := 1
			i := i + 1

		(* Begin computing values *)
		i := 1
  		loop:
    		if i >= n: break
    		j := 0
    		loop:
      			if j >= i: break
      			if arr[j] < arr[i] and dp[j] + 1 > dp[i]:
        			dp[i] := dp[j] + 1
      			j := j + 1
    		i := i + 1

  		maxLen := dp[0]
  		i := 1
  		loop:
    		if i >= n: break
    		if dp[i] > maxLen:
      			maxLen := dp[i]
   			i := i + 1

  		return: maxLen

	var n is int
	n := readInteger()

	var arr is int [n]

	(* Populate array *)
	var i is int
	i := 0
	loop:
		if i >= n: break
		arr[i] := readInteger()
		i := i + 1
	
	var len is int
	len := lis: n, arr

	writeString: "longest inreasing subsequence has length "
	writeInteger: len
	writeString: "\n"
