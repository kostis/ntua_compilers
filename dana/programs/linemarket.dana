(* linemarket.dana 
 *
 * Input:
 * 6     <-- stores
 * 3     <-- N (number of intervals)
 * 10    <-- s (start of interval 1)
 * 12    <-- f (end of interval 1)
 * 0     <-- s (start of interval 2)
 * 4     <-- f (end of interval 2)
 * 5     <-- s (start of interval 3)
 * 8     <-- f (end of interval 3)
 * 
 * Output:
 * 2
 *)
def main
    var stores size s f N tail is int
    var MAX_STORES MAX_PLACES is int
    var i is int
    var arr is int[200000]

    def swap: x y as ref int
        var t is int
        t := x
        x := y
        y := t

    def bsort: n as int, x as int[]
        var changed is byte
        var i_bsort is int

        loop:
            changed := false
            i_bsort := 0
            loop:
                if i_bsort < n-1:
                    if x[i_bsort] > x[i_bsort+1]:
                        swap: x[i_bsort], x[i_bsort+1]
                        changed := true
                    i_bsort := i_bsort + 1
                else: break
            if not changed: break

    def possible_store is byte: current_arr as int[], mid spaces stores_to_place as int
        var last_position placed_stores i_ps is int
        var j is int
        var position is int
        last_position := -1000000000
        placed_stores := 0
        i_ps := 0
        loop:
            if i_ps >= (spaces/2): break
            else:
                j := 2*i_ps
                if (last_position + mid) > current_arr[j]: position := last_position + mid
                else: position := current_arr[j]
                loop:
                    if position > current_arr[j + 1]: break
                    else:
                        placed_stores := placed_stores + 1
                        last_position := position
                        position := position + mid
                        if placed_stores >= stores_to_place: return: true
                i_ps := i_ps + 1
        return: false

    def largest_minimum_distance is int: lmd_arr as int[], spaces num_stores as int
        var distance is int
        var result left right is int

        bsort: spaces, lmd_arr
        result := 0
        left := 0
        if spaces > 0 : right := lmd_arr[spaces - 1] - lmd_arr[0]
        else: right := 0


        loop:
            if left > right: break
            else:
                if left > right : distance := left
                else: distance := (left + right) / 2

                if distance <= 0 : distance := 1

                if possible_store(lmd_arr, distance, spaces, num_stores):
                    result := distance
                    left := distance + 1
                else:
                    right := distance - 1
        return: result

    tail := 0
    MAX_STORES := 1000000
    MAX_PLACES := 100000

    stores := readInteger()
    N := readInteger()


    if stores > MAX_STORES or stores < 1:
        writeString: "Wrong starting input, let's try again!\n"
        stores := readInteger()

    if N > MAX_PLACES or N < 1:
        writeString: "Wrong starting input, let's try again!\n"
        N := readInteger()

    i := 0

    loop:
        if i >= N: break
        else:
            s := readInteger()
            f := readInteger()

            arr[i*2] := s
            arr[i*2 + 1] := f
            tail := tail + 2
            i := i + 1

    writeInteger: largest_minimum_distance(arr, tail, stores)
    writeString: "\n"
