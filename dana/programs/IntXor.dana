# A (not so efficient) program that returns the XOR of 2 ints

def main

	# A binary number is represented with an array
	# where every bit is stored as an int

	# Function definitions
	def DecToBin: n as int, N as int[]
		var max i is int
		max	:= 16384
		i	:= 14

		loop:
			N[i] := n / max
			n := n % max
			max := max / 2
			i := i - 1
			if i < 0:	break

	def BinToDec is int: N as int[]
		var max i n is int
		max := 16384
		i   := 14
		n	:= 0

		loop:
			n := n + N[i] * max
			max := max / 2
			i := i - 1
			if i < 0:	break
		return : n

	def XOR: A B X as int[]
		var i is int
		i := 14

		loop:
			X[i] := (A[i] + B[i]) % 2
			i := i - 1
			if i < 0:	break


	# Main program
	var a b x is int
	var A B X is int[15]

	# Read input
	writeString: "Input 2 non negative integers"
	a := readInteger()
	b := readInteger()

	# Convert to binary
	DecToBin: a, A
	DecToBin: b, B

	# Calculate XOR
	XOR: A, B, X

	# Convert result to int
	x := BinToDec(X)

	# Print result
	writeInteger: x
	writeString : "\n"
