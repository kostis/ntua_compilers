def main

    var size_main is int

    def printBoard: board_param as byte[][], n_param as int
        var i_pb j_pb is int
        i_pb := 0
        loop:
            if i_pb >= n_param :
                break
            j_pb := 0
            loop:
                if j_pb >= n_param :
                    break
                if board_param[i_pb][j_pb] = true :
                    writeString: "Q "
                else :
                    writeString: ". "
                j_pb := j_pb + 1
            writeString: "\n"
            i_pb := i_pb + 1
        writeString: "\n"

    def isSafe is byte: board_param as byte[][], row_param col_param n_param as int
        var i_is j_is is int

        i_is := 0
        loop:
            if i_is >= row_param :
                break
            if board_param[i_is][col_param] = true :
                return : false
            i_is := i_is + 1

        i_is := row_param - 1
        j_is := col_param - 1
        loop:
            if i_is < 0 or j_is < 0 :
                break
            if board_param[i_is][j_is] = true :
                return : false
            i_is := i_is - 1
            j_is := j_is - 1

        i_is := row_param - 1
        j_is := col_param + 1
        loop:
            if i_is < 0 or j_is >= n_param :
                break
            if board_param[i_is][j_is] = true :
                return : false
            i_is := i_is - 1
            j_is := j_is + 1

        return : true

    def solveNQueensUtil is byte: board_param as byte[][], row_param n_param as int
        var col_util is int

        if row_param = n_param :
            printBoard: board_param, n_param
            return : true

        col_util := 0
        loop:
            if col_util >= n_param :
                break
            if isSafe(board_param, row_param, col_util, n_param) :
                if row_param < 20 and col_util < 20 : board_param[row_param][col_util] := true

                if solveNQueensUtil(board_param, row_param + 1, n_param) :
                    return : true
                
                if row_param < 20 and col_util < 20 : board_param[row_param][col_util] := false
            col_util := col_util + 1

        return : false

    def solveNQueens: n_param as int
        var board_snq is byte[20][20]
        var i_snq j_snq is int

        i_snq := 0
        loop:
            if i_snq >= n_param :
                break
            j_snq := 0
            loop:
                if j_snq >= n_param :
                    break
                if i_snq < 20 and j_snq < 20 : board_snq[i_snq][j_snq] := false
                j_snq := j_snq + 1
            i_snq := i_snq + 1

        if solveNQueensUtil(board_snq, 0, n_param) :
            skip
        else :
            writeString: "No solution exists.\n"

    writeString: "Enter board size: "
    size_main := readInteger()
    if size_main > 20 :
        writeString: "Warning: Board size capped at 20 due to program limits.\n"
        size_main := 20
    if size_main < 1 :
        writeString: "Info: Board size must be at least 1. Setting to 1.\n"
        size_main := 1
    
    if size_main > 0 : solveNQueens: size_main
    else: writeString: "No solution exists for non-positive size.\n"
