def main

    def printBoard: board as byte[][], n as int
        var i j is int
        i := 0
        loop:
            if i >= n : 
                break
            j := 0
            loop:
                if j >= n :  
                    break
                if board[i][j] = 1 :  
                    writeString: "Q "
                else :
                    writeString: ". "
                j := j + 1
            writeString: "\n"
            i := i + 1
        writeString: "\n"

    def isSafe is byte: board as byte[][], row col n as int
        var i j is int

        # check columns
        i := 0
        loop:
            if i >= row :  
                break
            if board[i][col] = 1 :  
                return : 0  
            i := i + 1

        # check left diagonal
        i := row - 1
        j := col - 1
        loop:
            if i < 0 or j < 0 :  
                break
            if board[i][j] = 1 :  
                return : 0
            i := i - 1
            j := j - 1

        # check right diagonal
        i := row - 1
        j := col + 1
        loop:
            if i < 0 or j >= n :  
                break
            if board[i][j] = 1 :  
                return : 0
            i := i - 1
            j := j + 1

        return : 1  

    def solveNQueensUtil is byte: board as byte[][], row n as int
        if row = n :  
            printBoard: board, n
            return : 1   

        var col is int
        col := 0
        loop:
            if col >= n :  
                break
            if isSafe: board, row, col, n :  
                board[row][col] := 1  
                if solveNQueensUtil: board, row + 1, n :  
                    return : 1  
                board[row][col] := 0  
            col := col + 1  

        return : 0   

    def solveNQueens: n as int
        var board is byte[n][n]
        var i j is int

        i := 0
        loop:
            if i >= n :  
                break
            j := 0
            loop:
                if j >= n :  
                    break
                board[i][j] := 0  
                j := j + 1  
            i := i + 1  

        if solveNQueensUtil: board, 0, n :  
            writeString: "Solution found.\n"
        else :
            writeString: "No solution exists.\n"

    var size is int
    writeString: "Enter board size: "
    size := readInteger()  
    solveNQueens: size  
