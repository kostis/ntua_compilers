$$

A solution to https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:

    Input: prices = [7,1,5,3,6,4]
    Output: 5
    Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
    Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:

    Input: prices = [7,6,4,3,1]
    Output: 0
    Explanation: In this case, no transactions are done and the max profit = 0.

$$ 


fun main(): nothing
        var nums: int[100];
        var i, n, maxProfit, currProfit, left, right: int;
    
    fun solve(): nothing
        fun max(a, b: int): int
        { $ max
            if a > b then
                return a;
            return b;
        } $ max
    
    { $ solve
        $ Deliberately don't use local variables, use the ones provided by main
        $ Set the value of maxProfit to result when done
        left <- 0;
        right <- 0;
        maxProfit <- 0;
        while right < n do
        {
            currProfit <- nums[right] - nums[left];
            if nums[left] < nums[right] then
            {
                maxProfit <- max(currProfit, maxProfit);
            }
            else 
                left <- right;
            right <- right + 1;
        }
    } $ solve

    fun assert(ref arr_str: char[]; expected_res: int): nothing
        
        fun init_nums_array(): nothing
        $ We deliberately do not pass a ref to the array we want to populate to test nested variables
            var i, number_of_elmnts, tmp: int;
            
        { $ init_nums_array
            i <- 0;
            number_of_elmnts <- 0;
            tmp <- 0;
            while i < strlen(arr_str) do 
            {   
                if arr_str[i] = ',' then
                {
                    nums[number_of_elmnts] <- tmp;
                    number_of_elmnts <- number_of_elmnts + 1;
                    tmp <- 0;
                }
                else
                {
                    tmp <- tmp * 10 + ascii(arr_str[i]) - ascii('0');
                }
                i <- i + 1;
            }
            nums[number_of_elmnts] <- tmp;
            n <- number_of_elmnts + 1;
        } $ init_nums_array

        fun print_nums(): nothing
            var i: int;
        {
            i <- 0;
            while i < n do 
            {
                writeInteger(nums[i]);
                writeChar('\n');
                i <- i + 1;
            }
        }

    { $ assert
        init_nums_array();
        $ print_nums();
        solve();
        if maxProfit = expected_res then
            writeString("PASS\n");
        else
            writeString("FAIL\n");
    } $ assert

{ $ main
    assert("7,1,5,3,6,4", 5);
    assert("7,6,4,3,1", 0);
    assert("70,111,35,43,56,6634", 6599);
    assert("1,2,3,4,5,6,7", 6);
    assert("9,8,7,6,5,4,3,2,1", 0);

} $ main

$$

Should only print PASS

$$